View(Daniels_C9)
nortality <- read_excel("datasets/Daniels_C9.xls", sheet = "Tab91_Mortality_vs_States",
col_types = c("text", rep("numeric", 4),"text"))
View(nortality)
qplot(lat, mortality, date="mortality")
View(nortality)
mortality <- read_excel("datasets/Daniels_C9.xls", sheet = "Tab91_Mortality_vs_States",
col_types = c("text", rep("numeric", 4),"text"))
qplot(Lat, Mortality, data="mortality")
mortality <- as.data.frame(read_excel("datasets/Daniels_C9.xls", sheet = "Tab91_Mortality_vs_States",
col_types = c("text", rep("numeric", 4),"text")))
qplot(Lat, Mortality, data="mortality")
qplot(Lat, Mortality, data=mortality)
library(readxl)
Daniels_C9 <- read_excel("datasets/Daniels_C9.xls",
sheet = "T92_ExerciseData")
View(Daniels_C9)
ExerciseData <- read_excel("datasets/Daniels_C9.xls", sheet = "T92_ExerciseData",
col_types = c(rep("numeric", 7))))
ExerciseData <- read_excel("datasets/Daniels_C9.xls", sheet = "T92_ExerciseData",
col_types = c(rep("numeric", 7)))
View(ExerciseData)
View(ExerciseData)
qplot(Duration, VO2, data=ExerciseData)
library(readxl)
Daniels_C9 <- read_excel("datasets/Daniels_C9.xls",
sheet = "T93_ATPConsumption")
View(Daniels_C9)
ATPbrothers <- read_excel("datasets/Daniels_C9.xls",  sheet = "T93_ATPConsumption",
col_types = c(rep("numeric", 6)))
ATPbrothers <- read_excel("datasets/Daniels_C9.xls",  sheet = "T93_ATPConsumption",
col_types = c(rep("numeric", 5)))
View(ATPbrothers)
qplot(ATPYoung, ATPold, data=ATPbrothers)
View(ATPbrothers)
qplot(ATPYoung, ATPOld, data=ATPbrothers)
qplot(ATPYoung, ATPOld, data=ATPbrothers, geom=c("points", "smooth"))
qplot(ATPYoung, ATPOld, data=ATPbrothers, geom = c("point", "smooth"))
qplot(ATPYoung, ATPOld, data=ATPbrothers, geom = c("point"))
qplot(ATPYoung, ATPOld, data=ATPbrothers)
View(mortality)
cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")
cor(ExerciseData[,c("Duration","VO2")], meth="pearson", use="complete.obs")
cor(ATPbrothers[,c("ATPYoung","ATPOld")], meth="pearson", use="complete.obs")
qplot(Lat, Mortality, data=mortality, main="Mortality from cancer skin by State latitude (USA)")
qplot(Duration, VO2, data=ExerciseData, main="Oxigen consumption and exercise (threadmill) time")
qplot(ATPYoung, ATPOld, data=ATPbrothers, main="ATP consumption in younger and older brothers")
p1<-qplot(Duration, VO2, data=ExerciseData, main="Oxigen consumption and exercise (threadmill) time")
p2<-qplot(Lat, Mortality, data=mortality, main="Mortality from cancer skin by State latitude (USA)")
p3<-qplot(ATPYoung, ATPOld, data=ATPbrothers, main="ATP consumption in younger and older brothers")
grid.arranmge(p1,p2,p3)
library(ggplot2)
grid.arrange(p1,p2,p3)
library(gridExtra)
grid.arrange(p1,p2,p3)
grid.arrange(p1,p2,p3, nrow=1)
CC1<-cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")[1,2]
p1<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",CC1))
p1
p1<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",round(CC1,3))
CC1<-cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")[1,2]
CC2<-cor(ExerciseData[,c("Duration","VO2")], meth="pearson", use="complete.obs")[1,2]
CC3<-cor(ATPbrothers[,c("ATPYoung","ATPOld")], meth="pearson", use="complete.obs")[1,2]
library(gridExtra)
p1<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",round(CC1,3)))
p2<-qplot(Lat, Mortality, data=mortality, main=paste0("Pearson CC=",round(CC2,3)))
p3<-qplot(ATPYoung, ATPOld, data=ATPbrothers, main=paste0("Pearson CC=",round(CC3,3)))
grid.arrange(p1,p2,p3, nrow=1)
# Package installation
arm_from_cran <- c("flexdashboard", "learnr", "bookdown",
"officer", "rticles", "webshot",
"tidyverse", "remotes", "babynames", "magick")
install.packages(arm_from_cran, dependencies = TRUE)
arm_from_gh <- c('yihui/xaringan', 'rstudio/blogdown',
'rstudio-education/armcompanion',
'haozhu233/kableExtra', 'apreshill/bakeoff',
'hebrewseniorlife/memor')
install.packages("GGally")
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Chunk 2: packages
source("http://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
require(devtools)
if(!require(installifnot)) install_github("uebvhir/installifnot")
installifnot("XML")
installifnot("GGally")
# installifnot("DT")
installifnot("corrplot")
installifnot("readxl")
installifnot("kableExtra")
installifnot("Hmisc")
installifnot("psych")
installifnot("webshot")
# Chunk 3
knitr::include_graphics("images/uebvhir.png")
# Chunk 4
knitr::include_graphics("images/correlationTitles.png")
# Chunk 5
knitr::include_graphics("images/motivation2.png")
# Chunk 6
knitr::include_graphics("images/Correlation_examples1.WKP.png")
# Chunk 7
library(readxl)
mortality <- as.data.frame(read_excel("datasets/Daniels_C9.xls", sheet = "Tab91_Mortality_vs_States",
col_types = c("text", rep("numeric", 4),"text")))
qplot(Lat, Mortality, data=mortality, main="Mortality from cancer skin by State latitude (USA)")
# Chunk 8
ExerciseData <- read_excel("datasets/Daniels_C9.xls", sheet = "T92_ExerciseData",
col_types = c(rep("numeric", 7)))
qplot(Duration, VO2, data=ExerciseData, main="Oxigen consumption and exercise (threadmill) time")
# Chunk 9
ATPbrothers <- read_excel("datasets/Daniels_C9.xls",  sheet = "T93_ATPConsumption",
col_types = c(rep("numeric", 5)))
qplot(ATPYoung, ATPOld, data=ATPbrothers, main="ATP consumption in younger and older brothers")
# Chunk 10
knitr::include_graphics("images/PearsonCCValues.png")
# Chunk 11
knitr::include_graphics("images/Correlation_examples2.WKP.png")
```
---
# Chunk 12
CC1<-cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")[1,2]
CC2<-cor(ExerciseData[,c("Duration","VO2")], meth="pearson", use="complete.obs")[1,2]
CC3<-cor(ATPbrothers[,c("ATPYoung","ATPOld")], meth="pearson", use="complete.obs")[1,2]
library(gridExtra)
p1<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",round(CC1,3)))
p2<-qplot(Lat, Mortality, data=mortality, main=paste0("Pearson CC=",round(CC2,3)))
p3<-qplot(ATPYoung, ATPOld, data=ATPbrothers, main=paste0("Pearson CC=",round(CC3,3)))
grid.arrange(p1,p2,p3, nrow=1)
CC1<-cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")[1,2]
CC2<-cor(ExerciseData[,c("Duration","VO2")], meth="pearson", use="complete.obs")[1,2]
CC3<-cor(ATPbrothers[,c("ATPYoung","ATPOld")], meth="pearson", use="complete.obs")[1,2]
library(gridExtra)
p1<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",round(CC1,3)))
p2<-qplot(Lat, Mortality, data=mortality, main=paste0("Pearson CC=",round(CC2,3)))
p3<-qplot(ATPYoung, ATPOld, data=ATPbrothers, main=paste0("Pearson CC=",round(CC3,3)))
grid.arrange(p1,p2,p3, nrow=1)
BMI_table3<- BMI_table2[1:30,c("BodyFat", "Age", "Height", "KneeCi", "AnkleCi", )]
library(XML)
url <- "http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_BMI_Regression"
BMI_parsed <- htmlParse(url)
BMI_table <- readHTMLTable(BMI_parsed, which = 2)
for (i in 1:ncol(BMI_table)) BMI_table[,i] <- as.numeric(BMI_table[,i])
BMI_table2 <- BMI_table[BMI_table$BodyFatSiriEqu < 100,]
BMI_table3<- BMI_table2[1:30,c("BodyFat", "Age", "Height", "KneeCi", "AnkleCi", )]
BMI_table3<- BMI_table2[1:30,c("BodyFat", "Age", "Height", "KneeCi", "AnkleCi" )]
colnames(BMI_table2)
BMI_table3<- BMI_table2[1:30,c("BodyFat", "Age", "Height","KneeCircumf", "AnkleCircumf" )]
BMI_table2[1:30,c("BodyFat", "Age", "Height","KneeCircumf", "AnkleCircumf" )]
BMI_table3<- BMI_table2[1:30,c("BodyFatSiriEqu", "Age", "Height","KneeCircumf", "AnkleCircumf" )]
library(XML)
url <- "http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_BMI_Regression"
BMI_parsed <- htmlParse(url)
BMI_table <- readHTMLTable(BMI_parsed, which = 2)
for (i in 1:ncol(BMI_table)) BMI_table[,i] <- as.numeric(BMI_table[,i])
BMI_table2 <- BMI_table[BMI_table$BodyFatSiriEqu < 100,]
BMI_table3<- BMI_table2[1:30,c("BodyFatSiriEqu", "Age", "Height","KneeCircumf", "AnkleCircumf" )]
```{r echo=FALSE, out.width="80%", fig.align='center'}
library(GGally)
ggpairs(BMI_table3)
# Chunk 1: setup
options(htmltools.dir.version = FALSE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
# Chunk 2: packages
source("http://raw.githubusercontent.com/miriamMota/scripts/master/installifnot.R")
require(devtools)
if(!require(installifnot)) install_github("uebvhir/installifnot")
installifnot("XML")
installifnot("GGally")
# installifnot("DT")
installifnot("corrplot")
installifnot("readxl")
installifnot("kableExtra")
installifnot("Hmisc")
installifnot("psych")
installifnot("webshot")
# Chunk 3
knitr::include_graphics("images/uebvhir.png")
# Chunk 4
knitr::include_graphics("images/correlationTitles.png")
# Chunk 5
knitr::include_graphics("images/motivation2.png")
# Chunk 6
knitr::include_graphics("images/Correlation_examples1.WKP.png")
# Chunk 7
library(readxl)
mortality <- as.data.frame(read_excel("datasets/Daniels_C9.xls", sheet = "Tab91_Mortality_vs_States",
col_types = c("text", rep("numeric", 4),"text")))
qplot(Lat, Mortality, data=mortality, main="Mortality from cancer skin by State latitude (USA)")
# Chunk 8
ExerciseData <- read_excel("datasets/Daniels_C9.xls", sheet = "T92_ExerciseData",
col_types = c(rep("numeric", 7)))
qplot(Duration, VO2, data=ExerciseData, main="Oxigen consumption and exercise (threadmill) time")
# Chunk 9
ATPbrothers <- read_excel("datasets/Daniels_C9.xls",  sheet = "T93_ATPConsumption",
col_types = c(rep("numeric", 5)))
qplot(ATPYoung, ATPOld, data=ATPbrothers, main="ATP consumption in younger and older brothers")
# Chunk 10
knitr::include_graphics("images/PearsonCCValues.png")
# Chunk 11
knitr::include_graphics("images/Correlation_examples2.WKP.png")
```
---
# Chunk 12
CC1<-cor(mortality[,c("Mortality","Lat")], meth="pearson", use="complete.obs")[1,2]
CC2<-cor(ExerciseData[,c("Duration","VO2")], meth="pearson", use="complete.obs")[1,2]
CC3<-cor(ATPbrothers[,c("ATPYoung","ATPOld")], meth="pearson", use="complete.obs")[1,2]
library(gridExtra)
p1<-qplot(Lat, Mortality, data=mortality, main=paste0("Pearson CC=",round(CC1,3)))
p2<-qplot(Duration, VO2, data=ExerciseData, main=paste0("Pearson CC=",round(CC2,3)))
p3<-qplot(ATPYoung, ATPOld, data=ATPbrothers, main=paste0("Pearson CC=",round(CC3,3)))
grid.arrange(p1,p2,p3, nrow=1)
# Chunk 13
age<-c(23,33,27,28,29,39,41,45,30,50,53,36,54,56,57,58,59,60,61)
percFat <- c(9.5,27.9,17.8,18.7,23,31.4,25.9,34,25.2,31.1,34.7,32.0,29.1,32.5,30.3,33.0,33.8,31.5,34.5)
bodyFat<- data.frame(age,percFat)
bodyFat <- bodyFat[order(bodyFat$age),]
reg<-lm(percFat ~ age, data = bodyFat)
coeff=coefficients(reg)
# Chunk 14
# library(DT)
# head(bodyFat) %>%
#   datatable()
library(magrittr)
library(kableExtra)
aTable<- kableExtra::kable(bodyFat)
kable_styling(aTable, "striped", position = "center", font_size = 11)
# Chunk 15
sp<- ggplot(bodyFat, aes(x=age, y=percFat)) + geom_point()
sp
# Chunk 16
sp + geom_abline(intercept = coeff[1], slope=coeff[2]) + stat_smooth()
# Chunk 17
rankAge= rank(age)
rankFat=rank(percFat)
bodyFatWithRanks <- data.frame(age, rankAge, percFat, rankFat )
bodyFatWithRanks<- bodyFatWithRanks[order(bodyFatWithRanks$age),]
aTable<- kableExtra::kable(bodyFatWithRanks)
kable_styling(aTable, "striped", position = "center", font_size = 11)
# Chunk 18
cor(age,percFat,
method = "spearman")
cor(rankAge, rankFat,
method = "pearson")
# Chunk 19
knitr::include_graphics("images/summary-of-data-types-and-scales.png")
# Chunk 20
knitr::include_graphics("images/inferenceExample1.png")
# Chunk 21
knitr::include_graphics("images/introduction-to-statistical-inference.jpg")
# Chunk 22
library(XML)
url <- "http://wiki.stat.ucla.edu/socr/index.php/SOCR_Data_BMI_Regression"
BMI_parsed <- htmlParse(url)
BMI_table <- readHTMLTable(BMI_parsed, which = 2)
for (i in 1:ncol(BMI_table)) BMI_table[,i] <- as.numeric(BMI_table[,i])
BMI_table2 <- BMI_table[BMI_table$BodyFatSiriEqu < 100,]
BMI_table3<- BMI_table2[1:30,c("BodyFatSiriEqu", "Age", "Height","KneeCircumf", "AnkleCircumf" )]
colnames(BMI_table3)<- substr(colnames(BMI_table3),1,7)
# Chunk 23
library(GGally)
ggpairs(BMI_table3)
library(Hmisc)
res<- rcorr(as.matrix(BMI_table3[,1:5]))
result<- res[[1]]
for (i in 1:nrow(result))
for(j in i:ncol(result))
if (j > i) result[i,j]<- res[[3]][i,j]
aTable<- kableExtra::kable(round(result,3))
kable_styling(aTable, "striped", position = "center", font_size = 11)
setwd("~/Dropbox (Nuevo Equipo VHIR10)/SotaCV/Omics_Data_Analysis-Course_Materials")
###################################################
### code chunk number 1: getPackages
###################################################
if (!(require("estrogen", character.only=T))){
BiocManager::install("estrogen")
}
###################################################
### code chunk number 7: affybatch.create
###################################################
require(Biobase)
require(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(estrogenDir,"targLimma.txt"),
header = TRUE, row.names = 1, sep="\t")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(estrogenDir,fileNames),
phenoData=sampleInfo)
###################################################
### code chunk number 5: estrogenDir
###################################################
require(estrogen)
estrogenDir <- system.file("extdata", package = "estrogen")
print(estrogenDir)
###################################################
### code chunk number 7: affybatch.create
###################################################
require(Biobase)
require(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(estrogenDir,"targLimma.txt"),
header = TRUE, row.names = 1, sep="\t")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(estrogenDir,fileNames),
phenoData=sampleInfo)
###################################################
### code chunk number 8: wrongaffybatch.create
###################################################
require(affy)
setwd(estrogenDir)
rawData.wrong <- ReadAffy()
setwd(workingDir)
###################################################
### code chunk number 9: plotHist
###################################################
info <- data.frame(grupo=c(1,1,2,2,3,3,4,4))
sampleNames <- pData(rawData)$Target
hist(rawData, main="Signal distribution", col=info$grupo, lty=1:ncol(info))
legend (x="topright", legend=sampleNames , col=info$grupo, lty=1:ncol(info))
###################################################
### code chunk number 10: computeDeg
###################################################
deg<-AffyRNAdeg(rawData, log.it=T)
summaryAffyRNAdeg(deg)
###################################################
### code chunk number 12: boxPlot
###################################################
### boxplot
boxplot(rawData, cex.axis=0.6, col=info$grupo, las=2, names=sampleNames)
###################################################
### code chunk number 13: plotDendro
###################################################
### La muestras del mismo grupo deber\'ian agruparse juntas
clust.euclid.average <- hclust(dist(t(exprs(rawData))),method="average")
plclust(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of samples",  hang=-1)
###################################################
### code chunk number 15: affyPLM
###################################################
stopifnot(require(affyPLM))
computePLM <- T
if(computePLM){
Pset<- fitPLM(rawData)
save(Pset, file=file.path(dataDir,"PLM.Rda"))
}else{
load (file=file.path(dataDir,"PLM.Rda"))
}
###################################################
### code chunk number 16: plotRLE
###################################################
RLE(Pset, main = "Relative Log Expression", names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6,ylim=c(-5,5))
###################################################
### code chunk number 17: plotNUSE
###################################################
NUSE(Pset, main = "Normalized Unscaled Standard Errors", las=2, names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6, ylim=c(0.5,1.5))
###################################################
### code chunk number 18: cleanTheHouse
###################################################
rm(Pset)
gc()
detach("package:affyPLM")
###################################################
### code chunk number 19: normalization.rma
###################################################
stopifnot(require(affy))
normalize <- T
if(normalize){
eset_rma <- rma(rawData)
save(eset_rma, file=file.path(dataDir,"normalized.Rda"))
}else{
load (file=file.path(dataDir,"normalized.Rda"))
}
dataDir <-file.path(workingDir, "data")
getwd()
setwd("..")
###################################################
### code chunk number 3: preparaDirectorios
###################################################
workingDir <-getwd()
system("mkdir data")
system("mkdir results")
dataDir <-file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
setwd(workingDir)
getwd()
setwd("~/Dropbox (Nuevo Equipo VHIR10)/SotaCV/Omics_Data_Analysis-Course_Materials")
###################################################
### code chunk number 1: getPackages
###################################################
if (!(require("estrogen", character.only=T))){
BiocManager::install("estrogen")
}
###################################################
### code chunk number 3: preparaDirectorios
###################################################
workingDir <-getwd()
system("mkdir data")
system("mkdir results")
dataDir <-file.path(workingDir, "data")
resultsDir <- file.path(workingDir, "results")
setwd(workingDir)
###################################################
### code chunk number 4: fijaOpciones
###################################################
options(width=80)
options(digits=5)
###################################################
### code chunk number 5: estrogenDir
###################################################
require(estrogen)
estrogenDir <- system.file("extdata", package = "estrogen")
print(estrogenDir)
###################################################
### code chunk number 7: affybatch.create
###################################################
require(Biobase)
require(affy)
sampleInfo <- read.AnnotatedDataFrame(file.path(estrogenDir,"targLimma.txt"),
header = TRUE, row.names = 1, sep="\t")
fileNames <- pData(sampleInfo)$FileName
rawData <- read.affybatch(filenames=file.path(estrogenDir,fileNames),
phenoData=sampleInfo)
###################################################
### code chunk number 8: wrongaffybatch.create
###################################################
require(affy)
setwd(estrogenDir)
rawData.wrong <- ReadAffy()
setwd(workingDir)
###################################################
### code chunk number 9: plotHist
###################################################
info <- data.frame(grupo=c(1,1,2,2,3,3,4,4))
sampleNames <- pData(rawData)$Target
hist(rawData, main="Signal distribution", col=info$grupo, lty=1:ncol(info))
legend (x="topright", legend=sampleNames , col=info$grupo, lty=1:ncol(info))
###################################################
### code chunk number 10: computeDeg
###################################################
deg<-AffyRNAdeg(rawData, log.it=T)
summaryAffyRNAdeg(deg)
plotAffyRNAdeg(deg)
legend (x="bottomright", legend=sampleNames, col=1:nrow(info), lty=1:nrow(info), cex=0.7)
###################################################
### code chunk number 12: boxPlot
###################################################
### boxplot
boxplot(rawData, cex.axis=0.6, col=info$grupo, las=2, names=sampleNames)
###################################################
### code chunk number 13: plotDendro
###################################################
### La muestras del mismo grupo deber\'ian agruparse juntas
clust.euclid.average <- hclust(dist(t(exprs(rawData))),method="average")
plclust(clust.euclid.average, labels=sampleNames, main="Hierarchical clustering of samples",  hang=-1)
###################################################
### code chunk number 15: affyPLM
###################################################
stopifnot(require(affyPLM))
computePLM <- T
if(computePLM){
Pset<- fitPLM(rawData)
save(Pset, file=file.path(dataDir,"PLM.Rda"))
}else{
load (file=file.path(dataDir,"PLM.Rda"))
}
###################################################
### code chunk number 16: plotRLE
###################################################
RLE(Pset, main = "Relative Log Expression", names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6,ylim=c(-5,5))
###################################################
### code chunk number 17: plotNUSE
###################################################
NUSE(Pset, main = "Normalized Unscaled Standard Errors", las=2, names=sampleNames, las=2, col=info$grupo+1, cex.axis=0.6, ylim=c(0.5,1.5))
###################################################
### code chunk number 18: cleanTheHouse
###################################################
rm(Pset)
gc()
detach("package:affyPLM")
###################################################
### code chunk number 19: normalization.rma
###################################################
stopifnot(require(affy))
normalize <- T
if(normalize){
eset_rma <- rma(rawData)
save(eset_rma, file=file.path(dataDir,"normalized.Rda"))
}else{
load (file=file.path(dataDir,"normalized.Rda"))
}
###################################################
### code chunk number 20: normBoxPlot
###################################################
boxplot(eset_rma,main="RMA", names=sampleNames, cex.axis=0.7, col=info$grupo+1,las=2)
###################################################
### code chunk number 22: filtratge
###################################################
require(genefilter)
filtrats <- nsFilter(eset_rma)
require(hgu95av2.db)
BiocManager::install("hgu95av2.db")
###################################################
### code chunk number 22: filtratge
###################################################
require(genefilter)
require(hgu95av2.db)
filtrats <- nsFilter(eset_rma)
class(filtrats)
names(filtrats)
dim(exprs(filtrats$eset))
install.packages("psych")
library(kableExtra)
# Rmd to PDF
pagedown::chrome_print("Correlation_and_Association.Rmd")
